@namespace Shipwreck.ViewModelUtils.Components
@inherits BindableComponentBase
@using System.Collections
@using (OnBeginRender())
{
    <nav class="form-inline" aria-label="...">
        @ChildContent
        <ListScope T="CommandViewModelBase"
                   Source="@((IList)Commands)"
                   DependsOnItemProperties="Array.Empty<string>()">
            @foreach (var c in (Commands ?? Enumerable.Empty<ICommandViewModel>()))
            {
                <CommandButton @key="@c.GetHashCode()"
                               BaseClass="btn btn-sm mr-2 mb-3"
                               DataContext="c" />
            }
        </ListScope>
        <span class="form-control mb-3 border-0">
            @if (0 <= FilteredCount && FilteredCount != TotalCount)
            {
                @FilteredCount.Value.ToString("#,0")
                @(" /")
            }
            @TotalCount.ToString("#,0")
            件
        </span>
        @if (PageSize > 0 && Count > PageSize)
        {
            var pMax = (Count - 1) / PageSize;
            var R = SiblingRange;

            <ul class="pagination">
                <li class="page-item @(PageIndex > 0 ? null : "disabled")">
                    <a href="javascript:void(0)"
                       class="page-link"
                       @onclick="@(() => SetPageIndex(PageIndex - 1))"
                       @onclick:preventDefault="true"
                       data-enhance-nav="false">@PreviousText</a>
                </li>

                @for (var d = -R; d <= R; d++)
                {
                    var i = PageIndex + d;
                    if (0 <= i && i <= pMax)
                    {
                        <li class="page-item @(i == PageIndex ? "active" : null)">
                            <a href="javascript:void(0)"
                               class="page-link"
                               @onclick="@(() => SetPageIndex(i))"
                               @onclick:preventDefault="true"
                               data-enhance-nav="false">@(i + 1)</a>
                        </li>
                    }
                }

                <li class="page-item @(PageIndex < pMax ? null : "disabled")">
                    <a href="javascript:void(0)"
                       class="page-link"
                       @onclick="@(() => SetPageIndex(PageIndex + 1))"
                       @onclick:preventDefault="true"
                       data-enhance-nav="false">@NextText</a>
                </li>
            </ul>
        }

        @if (ShowPageSize && Count > 50 && 0 < PageSize && PageSize < int.MaxValue)
        {
            <span class="form-control mb-3 border-0">
                表示件数:
                <select class="form-control form-control-sm custom-select custom-select-sm"
                        @bind="@PageSizePrivate">
                    @foreach (var e in PageSizes ?? [])
                    {
                        <option value="@e"
                                selected="@(e == PageSize ? "selected" : null)">
                            @(e)件
                        </option>
                    }
                </select>
            </span>
        }
    </nav>
}
@code
{
    private static readonly ReadOnlyCollection<int> _DefaultPageSizes = new([50, 100, 250, 500, 1000]);

    private int Count => FilteredCount ?? TotalCount;

    [Parameter]
    public int TotalCount { get; set; }

    [Parameter]
    public int? FilteredCount { get; set; }

    #region PageSize

    [Parameter]
    public IEnumerable<int> PageSizes { get; set; } = _DefaultPageSizes;

    [Parameter]
    public int PageSize { get; set; }

    private int PageSizePrivate
    {
        get => PageSize;
        set => SetPageSize(value);
    }

    protected void SetPageSize(int value)
    {
        var cv = PageSize;
        if (value != cv)
        {
            var h = PageSizeChanged;
            if (h != null)
            {
                h(value);
                if (PageSize != cv)
                {
                    return;
                }
            }

            PageSize = value;
        }
    }

    [Parameter]
    public Action<int> PageSizeChanged { get; set; }

    #endregion PageSize

    #region PageIndex

    [Parameter]
    public int SiblingRange { get; set; } = 5;

    [Parameter]
    public int PageIndex { get; set; }

    protected void SetPageIndex(int value)
    {
        var cv = PageIndex;
        if (value != cv)
        {
            var h = PageIndexChanged;
            if (h != null)
            {
                h(value);
                if (PageIndex != cv)
                {
                    return;
                }
            }

            PageIndex = value;
        }
    }

    [Parameter]
    public Action<int> PageIndexChanged { get; set; }

    #endregion PageIndex

    [Parameter]
    public bool ShowPageSize { get; set; } = true;

    [Parameter]
    public string PreviousText { get; set; } = "前へ";

    [Parameter]
    public string NextText { get; set; } = "次へ";

    [Parameter]
    public IReadOnlyList<CommandViewModelBase> Commands { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }
}
