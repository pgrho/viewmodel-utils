<#@ template language="C#" #>
<#@ output extension=".cs" #>
using System;
using System.Diagnostics;
using System.Threading.Tasks;
<#
foreach (var c in new[]{
    new C("FrameworkPageViewModel") { DefaultTitle = "Title" },
    new C("WindowViewModel", "IS_WPF") { DefaultTitle = "ApplicationName" },
})
{
    if (!string.IsNullOrEmpty(c.If))
    {
#>
#if <#= c.If #>
<#
    }
#>
namespace <#= c.Namespace #>
{
    partial class <#= c.Name #>
    {
        #region InvokeAsync

        public bool InvokeRequired => Interaction?.InvokeRequired ?? false;

        public Task InvokeAsync(Action action)
            => Interaction.InvokeAsync(this, action);

        public Task<T> InvokeAsync<T>(Func<T> func)
            => Interaction.InvokeAsync(this, func);

        #endregion InvokeAsync

        #region Logger
<#
foreach (var t in new [] { "Verbose", "Information", "Warning", "Error", "Critical" })
{
#>
        public void Log<#= t #>(string message)
            => Logger?.Log(TraceEventType.<#= t #>, 0, message);
        public void Log<#= t #>(string format, params object[] args)
            => Logger?.Log(TraceEventType.<#= t #>, 0, format, args);
        public void Log<#= t #>(int id, string message)
            => Logger?.Log(TraceEventType.<#= t #>, id, message);
        public void Log<#= t #>(int id, string format, params object[] args)
            => Logger?.Log(TraceEventType.<#= t #>, id, format, args);
<#
}
#>
        #endregion Logger

        #region Toast

        public bool SupportsToasts => Interaction?.SupportsToasts ?? false;
        
<#
foreach (var t in new [] { "Success", "Error", "Warning", "Information" })
{
#>
        public Task Show<#= t #>ToastAsync(string message, string title = null)
        {
            if (string.IsNullOrEmpty(title))
            {
                LogInformation("Show<#= t #>ToastAsync(\"{0}\")", message);
            }
            else
            {
                LogInformation("Show<#= t #>ToastAsync(\"{0}\", \"{1}\")", message, title);
            }
            return Interaction.Show<#= t #>ToastAsync(this, message, title ?? <#= c.DefaultTitle #>);
        }
<#
}
#>

        #endregion Toast

        #region メッセージ

        public bool SupportsMessageBoxes => Interaction?.SupportsMessageBoxes ?? false;

        public Task AlertAsync(
            string message,
            string title,
            string buttonText,
            BorderStyle? buttonStyle)
        {
            LogInformation("AlertAsync(\"{0}\")", message);
            var task = Interaction.AlertAsync(
                this,
                message,
                title,
                buttonText,
                buttonStyle);

            task.ContinueWith(t =>
            {
                if (t.Status == TaskStatus.RanToCompletion)
                {
                    LogInformation("AlertAsync(\"{0}\") closed", message);
                }
                else if (t.Exception != null)
                {
                    LogError("AlertAsync(\"{0}\") Exception={1}", message, t.Exception);
                }
            });

            return task;
        }

        public Task<bool> ConfirmAsync(
            string message,
            string title,
            string trueText,
            BorderStyle? trueStyle,
            string falseText,
            BorderStyle? falseStyle)
        {
            LogInformation("ConfirmAsync(\"{0}\")", message);
            var task = Interaction.ConfirmAsync(
                this,
                message,
                title,
                trueText,
                trueStyle,
                falseText,
                falseStyle);

            task.ContinueWith(t =>
            {
                if (t.Status == TaskStatus.RanToCompletion)
                {
                    LogInformation("ConfirmAsync(\"{0}\") result={1}", message, t.Result);
                }
                else if (t.Exception != null)
                {
                    LogError("ConfirmAsync(\"{0}\") Exception={1}", message, t.Exception);
                }
            });

            return task;
        }

        #endregion メッセージ

        #region ファイル

        public bool SupportsFileDialogs => Interaction?.SupportsFileDialogs ?? false;

        public Task<string[]> OpenFilesAsync(
            string filter,
            int filterIndex = 0,
            string fileName = null,
            string initialDirectory = null,
            bool multiSelect = false)
            => Interaction.OpenFilesAsync(
            this,
            filter: filter,
            filterIndex: filterIndex,
            fileName: fileName,
            initialDirectory: initialDirectory,
            multiSelect: multiSelect);

        public Task<string> SaveFileAsync(
            string filter,
            int filterIndex = 0,
            string fileName = null,
            string initialDirectory = null)
            => Interaction.SaveFileAsync(
            this,
            filter: filter,
            filterIndex: filterIndex,
            fileName: fileName,
            initialDirectory: initialDirectory);

        public Task<string> OpenDirectoryAsync(
            string directoryName = null)
            => Interaction.OpenDirectoryAsync(
            this,
            directoryName: directoryName);

        public Task<string> SaveDirectoryAsync(
            string directoryName = null)
            => Interaction.OpenDirectoryAsync(
            this,
            directoryName: directoryName);

        #endregion ファイル

        #region モーダル

        public bool IsModalSupported(Type viewModelType)
            => Interaction.IsModalSupported(this, viewModelType);

        public Task OpenModalAsync(object viewModel)
            => Interaction.OpenModalAsync(this, viewModel);

        public Task CloseModalAsync(object viewModel)
            => Interaction.OpenModalAsync(this, viewModel);

        #endregion モーダル
    }
}
<#
    if (!string.IsNullOrEmpty(c.If))
    {
#>
#endif
<#
    }
}
#>
<#+
class C
{
    public C(string n, string @if = null, string ns = null)
    {
        Namespace = ns ?? "Shipwreck.ViewModelUtils";
        Name = n;
        If = @if;
    }
    public string Namespace;
    public string Name;
    public string If;
    public string DefaultTitle;
}
#>