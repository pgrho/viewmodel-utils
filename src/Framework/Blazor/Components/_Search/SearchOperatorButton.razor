@namespace Shipwreck.ViewModelUtils.Components
@using Shipwreck.ViewModelUtils.Searching
@if (Operators != null)
{
    <div class="input-group-prepend">
        <button type="button"
                class="btn btn-sm btn-outline-secondary dropdown-toggle dropdown-toggle-no-caret"
                title="@Operators?.FirstOrDefault(e => e.Token == Operator)?.DisplayName"
                data-toggle="dropdown"
                tabindex="-1"
                aria-haspopup="true"
                aria-expanded="false">
            @Operator
        </button>
        <div class="dropdown-menu">
            @foreach (var op in Operators)
            {
                <button type="button"
                        @key="@op.Token"
                        class="dropdown-item"
                        @onclick="@(() => { Operator = op.Token; OnSelected?.Invoke(); })">
                    @if (!op.DisplayName.Contains(op.Token))
                    {
                        <code>@op.Token</code>@(":")
                    }
                    @op.DisplayName
                </button>
            }
        </div>
    </div>
}
@code
{
    private string _Operator;

    [Parameter]
    public string Operator
    {
        get => _Operator;
        set
        {
            if (value != _Operator)
            {
                _Operator = value;
                OperatorChanged?.Invoke(_Operator);
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public Action<string> OperatorChanged { get; set; }

    [Parameter]
    public IEnumerable<OperatorViewModel> Operators { get; set; }

    [Parameter]
    public Action OnSelected { get; set; }
}
