@namespace Shipwreck.ViewModelUtils.Components
@inherits BindableComponentBase<IEntitySelector>
@{
    var d = DataContext;
    var isEnabled = d != null && (IsEnabled ?? d.IsEnabled);
}
<div class="input-group">
    @if (d.UseList)
    {
        // TODO: expose list
        if (_ItemsTask == null)
        {
            _ItemsTask = d.GetItemsTask();
            if (_ItemsTask.Status < TaskStatus.RanToCompletion)
            {
                _ItemsTask.ContinueWith(_ => StateHasChanged());
            }
            _ItemsTask.ContinueWith(_ =>
            {
                if (d.SelectedId != null
        && d.SelectedItem == null
        && d.GetById(d.SelectedId) is object sel)
                {
                    d.SelectedItem = sel;
                }
            });
        }

        <select @ref="_Select"
            class="custom-select"
            @bind="@SelectedCode" disabled="@(isEnabled ? null : "disabled")">
            @if (_ItemsTask?.Status == TaskStatus.RanToCompletion)
            {
                foreach (var e in _ItemsTask.Result)
                {
                    var id = Id + "/" + d.GetId(e);
                    <option @key="@id"
                value="@d.GetCode(e)"
                selected="@(e == d.SelectedItem ? "selected" : null)">
                        @d.GetDisplayText(e)
                    </option>
                }
            }
        </select>
        @if (d.HasModal && isEnabled)
        {
            <div class="input-group-append">
                <button class="btn btn-outline-secondary"
                tabindex="-1"
                @onclick="@d.ShowModal">
                    <span class="fas fa-ellipsis-h"></span>
                </button>
            </div>
        }
    }
    else
    {
        <div class="input-group-prepend">
            <EntityTypeahead @ref="_Typeahead"
                         id="@Id"
                         class="@($"{(Theme?? FormGroupTheme.Default).ControlClass} {(IsRequired ? "required" : null)} {CodeClass}")"
                         style="@CodeStyle"
                         IsEnabled="@isEnabled"
                         AppendToSelector="@AppendToSelector"
                         DataContext="@d" />
        </div>
        @if (d.HasModal && isEnabled)
        {
            <div class="input-group-prepend">
                <button class="btn btn-outline-secondary"
                tabindex="-1"
                @onclick="@d.ShowModal">
                    <span class="fas fa-ellipsis-h"></span>
                </button>
            </div>
        }
        <div class="@($"{(Theme?? FormGroupTheme.Default).ControlClass} {NameClass}")"
         style="@CodeStyle"
         readonly="readonly"
         tabindex="-1">
            @(d?.SelectedItem != null ? d.GetName(d.SelectedItem) : null)
        </div>
    }
</div>
@code
{
    private ElementReference _Select;
    private EntityTypeahead _Typeahead;

    public ValueTask FocusAsync(bool selectAll = false)
    {
        if (DataContext?.UseList == true)
        {
            return _Select.FocusAsync();
        }
        return _Typeahead?.FocusAsync(selectAll) ?? default;
    }
}
