@namespace Shipwreck.ViewModelUtils.Components
@inherits BindableComponentBase<IPaginatable>
@using (OnBeginRender())
{
    var d = DataContext;
    <th @attributes="@AdditionalAttributes">
        @if (SortKeys?.Count > 0 && d != null)
        {
            var direction = d.Order.Take(SortKeys.Count).Select(e => e.Member).SequenceEqual(SortKeys)
            && d.Order.Take(SortKeys.Count).Select(e => e.IsDescending).Distinct().ToList() is var ds
            && ds.Count == 1 ? ds?[0] : null;

            <a class="text-light"
               href="javascript:void(0)"
               title="@Description"
               @onclick="@(() => d.ToggleSortKeys(SortKeys))"
               @onclick:preventDefault="true"
               data-enhance-nav="false">
                @if (!string.IsNullOrEmpty(Icon))
                {
                    <span class="@Icon"></span>
                }
                @Header
                <span class="fas @(direction == null ? null : direction == true ? "fas fa-caret-down" : "fas fa-caret-up")"></span>
            </a>
        }
        else
        {
            <span title="@Description">
                @if (!string.IsNullOrEmpty(Icon))
                {
                    <span class="@Icon"></span>
                }
                @Header
            </span>
        }
    </th>
}
@code
{
    [CascadingParameter]
    public IPaginatable SearchPage
    {
        get => DataContext;
        set => DataContext = value;
    }

    [Parameter]
    public string Header { get; set; }

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public string Description { get; set; }

    [Parameter]
    public string SortKey
    {
        get => SortKeys?.FirstOrDefault();
        set => SortKeys = string.IsNullOrWhiteSpace(value) ? null : new[] { value };
    }

    [Parameter]
    public IReadOnlyList<string> SortKeys { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    protected override bool OnDataContextPropertyChanged(string propertyName)
    {
        switch (propertyName)
        {
            case nameof(DataContext.Order):
                return true;
        }
        return false;
    }
}
