@namespace Shipwreck.ViewModelUtils.Components
@using Shipwreck.ViewModelUtils.Searching
@inherits BindableComponentBase<EntityConditionViewModel>
@using (OnBeginRender())
{
    var d = DataContext;
    if (d != null)
    {
        <SearchConditionHeader DataContext="@d" />
        <dd>
            <div class="input-group">
                @if (d.SelectedId != null)
                {
                    var text = d.SelectedItem != null ? d.Selector.GetDisplayText(d.SelectedItem) : $"#{d.SelectedId}";
                    <input type="text"
                           class="form-control"
                           readonly="readonly"
                           value="@text"
                           title="@text"
                           @onkeydown="@Clear"
                    @onkeydown:preventDefault />
                    <div class="input-group-append">
                        <CommandButton BaseClass="btn btn-sm"
                                       TabIndex="-1"
                                       DataContext="d.Selector.ShowModalCommand" />
                        <button type="button"
                                class="btn btn-sm btn-outline-secondary"
                                tabindex="-1"
                                @onclick="@Clear">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                }
                else
                {
                    <EntityTypeahead @ref="@_Typeahead"
                                     DataContext="@d.Selector"
                                     class="form-control" />
                    <div class="input-group-append">
                        <CommandButton BaseClass="btn btn-sm"
                                       TabIndex="-1"
                                       DataContext="d.Selector.ShowModalCommand" />
                        <button type="button"
                                class="btn btn-sm btn-outline-secondary"
                                tabindex="-1"
                                @onclick="@d.Remove">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                }
            </div>
        </dd>
    }
}
@code
{
    private EntityTypeahead _Typeahead;
    private bool _ShouldFocus;

    private void Clear()
    {
        DataContext.SelectedId = null;
        _ShouldFocus = true;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        var t = base.OnAfterRenderAsync(firstRender);

        if (DataContext?.SelectedId != null && _Typeahead != null)
        {
            _Typeahead.Dispose();
            _Typeahead = null;
        }
        if (_ShouldFocus)
        {
            _Typeahead?.FocusAsync();
            _ShouldFocus = false;
        }

        return t;
    }
}
