@namespace Shipwreck.ViewModelUtils.Components
@typeparam T
@inherits FormGroupBase
@{
    var theme = Theme ?? FormGroupTheme.Default;
}
<form id="@FormGroupId"
      class="@theme.FormGroupClass @AdditionalClass"
      @onsubmit="@(() => EnterCommand?.Execute(EnterCommandParameter))"
      @onsubmit:preventDefault>
    <label for="@InputId"
           class="@theme.LabelClass @AdditionalLabelClass"
           title="@Description">
        @if (ChildContent != null)
        {
            @ChildContent
        }
        else
        {
            @Title
        }
    </label>
    @if (ShouldGroup)
    {
        <div class="@theme.InputGroupClass">
            <input id="@InputId"
               class="@theme.ControlClass @(IsRequired ? "required" : null) @AdditionalInputClass"
               type="@(Type ?? (DataList?.Count> 0 ? "search" : "text"))"
               @ref="_GroupInput"
               @bind="@InternalValue"
               placeholder="@Placeholder"
               autocomplete="@(AutoComplete ?? "on")"
               disabled="@(!IsEnabled ? "disabled" : null)"
               readonly="@(IsReadOnly ? "readonly" : null)"
               list="@(DataList?.Count>0 ? DataListId : null)"
               @onfocus="@(() => OnFocusCommand?.Execute(OnFocusCommandParameter))" />
            @if (DataList?.Count > 0)
            {
                <span class="fas fa-chevron-down text-muted"
              style="pointer-events: none; position: absolute; right: 0.5rem; top: 0.5rem"></span>
                <datalist id="@DataListId">
                    @foreach (var t in DataList)
                    {
                        <option>@t</option>
                    }
                </datalist>
            }
        </div>
    }
    else
    {
        <input id="@InputId"
           class="@theme.ControlClass @(IsRequired ? "required" : null) @AdditionalInputClass"
           type="@(Type ?? "text")"
           @ref="_SingleInput"
           @bind="@InternalValue"
           placeholder="@Placeholder"
           autocomplete="@AutoComplete"
           disabled="@(!IsEnabled ? "disabled" : null)"
           readonly="@(IsReadOnly ? "readonly" : null)"
           @onfocus="@(() => OnFocusCommand?.Execute(OnFocusCommandParameter))" />
    }
</form>
@code
{
    private ElementReference _GroupInput;
    private ElementReference _SingleInput;

    [Inject]
    public IJSRuntime JS { get; set; }

    private bool ShouldGroup => DataList?.Count > 0;

    public override ValueTask FocusAsync(bool selectAll = false)
        => JS.FocusAsyncWithWarning(ShouldGroup ? _GroupInput : _SingleInput, selectAll, nameof(InputFormGroup<string>) + "#" + Title);
}
