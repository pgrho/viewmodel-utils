namespace Shipwreck.ViewModelUtils;

using D = InlineDataAttribute;

public class DateTimeMemberFilterTest
{
    [Theory]
    [D(0, 0, 0, null, true), D(1, 1, 1, null, true)]
    [D(0, 0, 0, "0001", false), D(1, 1, 1, "0001", true)]
    [D(2004, 12, 31, "2005", false)]
    [D(2005, 01, 01, "2005", true)]
    [D(2005, 12, 31, "2005", true)]
    [D(2006, 01, 01, "2005", false)]

    [D(2004, 12, 31, "=2005", false)]
    [D(2005, 01, 01, "=2005", true)]
    [D(2005, 12, 31, "=2005", true)]
    [D(2006, 01, 01, "=2005", false)]

    [D(2005, 05, 31, "=2005-06", false)]
    [D(2005, 06, 01, "=2005-06", true)]
    [D(2005, 06, 30, "=2005-06", true)]
    [D(2005, 07, 01, "=2005-06", false)]

    [D(2005, 06, 06, "=2005-06-07", false)]
    [D(2005, 06, 07, "=2005-06-07", true)]
    [D(2005, 06, 08, "=2005-06-07", false)]

    [D(2005, 06, 06, "=2005-6-7", false)]
    [D(2005, 06, 07, "=2005-6-7", true)]
    [D(2005, 06, 08, "=2005-6-7", false)]

    [D(2005, 06, 06, "=2005/06/07", false)]
    [D(2005, 06, 07, "=2005/06/07", true)]
    [D(2005, 06, 08, "=2005/06/07", false)]

    [D(2005, 06, 06, "=20050607", false)]
    [D(2005, 06, 07, "=20050607", true)]
    [D(2005, 06, 08, "=20050607", false)]

    [D(2004, 12, 31, "!=2005", true)]
    [D(2005, 01, 01, "!=2005", false)]
    [D(2005, 12, 31, "!=2005", false)]
    [D(2006, 01, 01, "!=2005", true)]
    [D(2004, 12, 31, "<2005", true)]
    [D(2005, 01, 01, "<2005", false)]
    [D(2005, 12, 31, "<2005", false)]
    [D(2006, 01, 01, "<2005", false)]
    [D(2004, 12, 31, "<=2005", true)]
    [D(2005, 01, 01, "<=2005", true)]
    [D(2005, 12, 31, "<=2005", true)]
    [D(2006, 01, 01, "<=2005", false)]
    [D(2004, 12, 31, ">2005", false)]
    [D(2005, 01, 01, ">2005", false)]
    [D(2005, 12, 31, ">2005", false)]
    [D(2006, 01, 01, ">2005", true)]
    [D(2004, 12, 31, ">=2005", false)]
    [D(2005, 01, 01, ">=2005", true)]
    [D(2005, 12, 31, ">=2005", true)]
    [D(2006, 01, 01, ">=2005", true)]
    [D(2000, 12, 31, "2001..2004", false)]
    [D(2001, 01, 01, "2001..2004", true)]
    [D(2004, 12, 31, "2001..2004", true)]
    [D(2005, 01, 01, "2001..2004", false)]
    [D(2001, 01, 31, "2001-02..2004-05", false)]
    [D(2001, 02, 01, "2001-02..2004-05", true)]
    [D(2004, 05, 31, "2001-02..2004-05", true)]
    [D(2004, 06, 01, "2001-02..2004-05", false)]
    [D(2001, 02, 02, "2001-02-03..2004-05-06", false)]
    [D(2001, 02, 03, "2001-02-03..2004-05-06", true)]
    [D(2004, 05, 06, "2001-02-03..2004-05-06", true)]
    [D(2004, 05, 07, "2001-02-03..2004-05-06", false)]

    [D(2001, 02, 02, "2001/02/03..2004/05/06", false)]
    [D(2001, 02, 03, "2001/02/03..2004/05/06", true)]
    [D(2004, 05, 06, "2001/02/03..2004/05/06", true)]
    [D(2004, 05, 07, "2001/02/03..2004/05/06", false)]

    [D(2001, 02, 02, "20010203..20040506", false)]
    [D(2001, 02, 03, "20010203..20040506", true)]
    [D(2004, 05, 06, "20010203..20040506", true)]
    [D(2004, 05, 07, "20010203..20040506", false)]
    public void Test(int y, int m, int d, string filter, bool isMatch)
        => Assert.Equal(
            isMatch,
            new DateTimeMemberFilter<(int y, int m, int d)>(e => e.y > 0 ? new DateTime(y, m, d).AddHours(12) : null, _ => { })
            {
                Filter = filter
            }.IsMatch((y, m, d)));
}
