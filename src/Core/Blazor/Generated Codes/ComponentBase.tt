<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using Microsoft.AspNetCore.Components;

<#
foreach (var g in new [] {
    new { NS = "Shipwreck.ViewModelUtils.Components", T = "BindableComponentBase" },
    new { NS = "Shipwreck.ViewModelUtils.Components", T = "BindableLayoutComponentBase" },
}.GroupBy(e => e.NS))
{
    var isComponent = g.Key.StartsWith("Shipwreck.ViewModelUtils.Components");
    var commonArgs = isComponent ? ", Action onChanged = null, [CallerMemberName]string propertyName = null, bool shouldNotify = true" : ", [CallerMemberName]string propertyName = null, Action onChanged = null";
    var commonApply = isComponent ? ", onChanged, propertyName, shouldNotify: shouldNotify" : ", propertyName, onChanged";
    var notification = isComponent ? "if (propertyName != null) RaisePropertyChanged(propertyName, shouldNotify)" : "if (propertyName != null) RaisePropertyChanged(propertyName)";
#>
namespace <#= g.Key #>
{
<#
    foreach (var t in g)
    {
#>
    partial class <#= t.T #>
    {
        public new Task InvokeAsync(Action workItem)
            => base.InvokeAsync(workItem);

        public new Task InvokeAsync(Func<Task> workItem)
            => base.InvokeAsync(workItem);

        private Stack<PropertyChangedExpectation> _PropertyChangedExpectations = new();
        
        protected virtual bool OnDataContextPropertyChanged(string propertyName)
        {
            if (_PropertyChangedExpectations.TryPeek(out var top)
                && top.ShouldIgnorePropertyChanged(propertyName))
            {
                return false;
            }
            return true;
        }

        public IDisposable PushPropertyChangedExpectation(string expectedPropertyName = null)
        {
            var s = new PropertyChangedExpectation(_PropertyChangedExpectations, expectedPropertyName);
            _PropertyChangedExpectations.Push(s);
            return s;
        }

        IBindableComponent IHasBindableComponent.Component => this;

        protected bool SetProperty(ref string field, string value<#= commonArgs #>)
        {
            if (value != field)
            {
                field = value;
                onChanged?.Invoke();
                <#= notification #>;
                return true;
            }
            return false;
        }

        protected bool SetProperty<TValue>(ref TValue field, TValue value<#= commonArgs #>)
        {
            if (!((field as IEquatable<TValue>)?.Equals(value) ?? Equals(field, value)))
            {
                field = value;
                onChanged?.Invoke();
                <#= notification #>;
                return true;
            }
            return false;
        }
<#
foreach (var v in new [] { "byte", "ushort", "uint", "ulong" })
{
#>

        protected bool SetFlagProperty(ref <#= v #> field, <#= v #> flag, bool hasFlag<#= commonArgs #>)
        {
            var nv = (<#= v #>)(hasFlag ? (field | flag) : (field & ~flag));
            return SetProperty(ref field, nv<#= commonApply #>);
        }
<#
}
if (isComponent)
{
#>
        protected virtual void RaisePropertyChanged([CallerMemberName]string propertyName = null, bool shouldNotify = true)
        {
            if (shouldNotify) ShouldRenderCore = true;

        }
<#
}
#>
    }
<#
    }
#>
}
<#
}
#>
namespace Shipwreck.ViewModelUtils.Components
{
<#
foreach (var t in new [] {
    new { Class = "BindableComponentBase<T>", Property = "T" },
    new { Class = "BindableLayoutComponentBase<T>", Property = "T" },
    new { Class = "ListComponentBase<TDataContext, TItem>", Property = "TDataContext" } })
{
#>
    partial class <#= t.Class #>
    {
        private <#= t.Property #> _DataContext;


        [Parameter]
        public virtual <#= t.Property #> DataContext
        {
            get => _DataContext;
            set
            {
                var prev = _DataContext;
                if (value != prev)
                {
                    OnDataContextRemoved(prev);
                    _DataContext = value;
                    OnDataContextSet(value);
                    ShouldRenderCore = true;
                }
            }
        }
         


     

        protected virtual void OnDataContextRemoved(<#= t.Property #> dataContext)
        {
            if (dataContext is INotifyPropertyChanged n)
            {
                n.PropertyChanged -= DataContext_PropertyChanged;
            }
            if (dataContext is IRequestFocus r)
            {
                r.RequestFocus -= DataContext_RequestFocus;
            }
        }

        protected virtual void OnDataContextSet(<#= t.Property #> dataContext)
        {
            if (dataContext is INotifyPropertyChanged n)
            {
                n.PropertyChanged += DataContext_PropertyChanged;
            }
            if (dataContext is IRequestFocus r)
            {
                r.RequestFocus += DataContext_RequestFocus;
            }
        }
        
        private void DataContext_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (OnDataContextPropertyChanged(e.PropertyName))
            {
                ShouldRenderCore = true;
            }
        }
        

        private void DataContext_RequestFocus(object sender, PropertyChangedEventArgs e)
        {
            if (sender == DataContext)
            {
                OnDataContextRequestedFocus(e.PropertyName);
            }
        }

        protected virtual bool OnDataContextRequestedFocus(string propertyName)
        {
            Console.WriteLine("Failed to focus element for property {0}. {1}#{2}", propertyName, GetType().FullName, GetHashCode());
            return false;
        }
    }
<#
}
#>
}